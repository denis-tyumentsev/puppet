#!/usr/bin/env bash

#устанавливает органайзеры, если не существуют
#переключает на нужную ветку, если ветки нет - создает
#если органайзеры существуют- удаляет node_modules, делает npm install

ROOT_DIR="<%= @noodoo_path %>"
ND_FRAMEWORK="git+ssh://git@github.com/noodoo/noodoo.git"
ND_BRANCH="<%= @branch %>"
ND_ORGS=( "org-counterparts" "org-deals" "org-documents" "org-models" "org-people" "org-shipments" "org-transports" "org-yves" )
ND_ORGS_BRANCH="<%= @branch %>"
ND_SHARED=( "flow" )
ND_ENV=production
MIGRATE_CMD='node tasks shipments/migrate -k'


main() {
  PRINT 'installing noodoo framework...'
  [ ! -d $ROOT_DIR ] && mkdir -p $ROOT_DIR
  cd $ROOT_DIR
  if ([ ! -d $ROOT_DIR/app ] || [ ! -n "$(ls -A $ROOT_DIR/app)" ]); then
    git clone $ND_FRAMEWORK $ROOT_DIR/app
    cd ./app && CHECKOUT $ND_BRANCH && npm install
    [ -f ./config.json.sample ] && cp -v ./config.json.sample ./config.json
    [ -f ./config.js.sample ] && cp -v ./config.js.sample ./config.js
    node tasks precompile
    else
    cd ./app && RM_NODE &&
    CHECKOUT $ND_BRANCH && npm install && cd ..
  fi

  PRINT 'installing organizers...'
  [ ! -d $ROOT_DIR/app/organizers ] && PRINT "can't find organizers folder" 1 && exit -1
  cd $ROOT_DIR/app/organizers
  for module in "${ND_ORGS[@]}"; do
    echo "> installing $module..."
    ARR_SPLIT=(${module//-/ })
    ORG_NAME=${ARR_SPLIT[1]}
    [ ! -n $ORG_NAME ] && ORG_NAME=$module
    if [ ! -d $ORG_NAME ]; then
      git clone "git+ssh://git@github.com/noodoo/$module.git" "$ORG_NAME"
      cd $ORG_NAME && CHECKOUT $ND_ORGS_BRANCH && npm install
      [ -f ./config.json.sample ] && cp -v ./config.json.sample ./config.json
      [ -f ./config.js.sample ] && cp -v ./config.js.sample ./config.js
      cd ..
      else
      cd $ORG_NAME && RM_NODE &&
      CHECKOUT $ND_ORGS_BRANCH && npm install && cd ..
    fi
  done

  PRINT 'installing shared modules...'
  [ ! -d $ROOT_DIR/shared ] && mkdir $ROOT_DIR/shared
  cd $ROOT_DIR/shared
  for module in "${ND_SHARED[@]}"; do
    echo "> installing $module..."
    [ ! -d $module ] && git clone "git+ssh://git@github.com/noodoo/$module.git" &&
      cd $module && CHECKOUT $ND_ORGS_BRANCH && npm install && cd ..
    [ -d $module ] && cd $module && RM_NODE &&
    CHECKOUT $ND_ORGS_BRANCH && npm install && cd ..
  done

  PRINT 'linking shared modules in noodoo...'
  NPM_LINKER $ROOT_DIR/app

  PRINT 'linking shared modules in organizers...'
  cd $ROOT_DIR/app/organizers
  for f in $(ls -d *); do
    NPM_LINKER $ROOT_DIR/app/organizers/$f && cd ..
  done;

  PRINT '> running the migrations...'
  cd $ROOT_DIR/app && NODE_ENV=$ND_ENV $MIGRATE_CMD
  
  PRINT '> restart noodoo app...'
  /usr/local/bin/noodoo_restart
  PRINT 'done!'
}


function PRINT {
  DEF='\033[0;39m'       #  ${DEF}
  DGRAY='\033[1;30m'     #  ${DGRAY}
  LRED='\033[1;31m'      #  ${LRED}
  LCYAN='\033[1;36m'     #  ${LCYAN}
  LGREEN='\033[1;32m'    #  ${LGREEN}
  LYELLOW='\033[1;33m'   #  ${LYELLOW}
  LBLUE='\033[1;34m'     #  ${LBLUE}
  LMAGENTA='\033[1;35m'  #  ${LMAGENTA}
  if [ -z "$2" ]; then
    echo -e "$LCYAN> $1$DEF"
  else
    echo -e "$LRED ERROR: $1$DEF"
  fi
}


function NPM_LINKER {
  cd $1/node_modules
  for dir in $(ls -d *); do
    for module in "${ND_SHARED[@]}"; do
      if [[ $dir == $module ]]; then
        npm link $module
      fi
    done
  done;
}

function CHECKOUT {
    if git branch -a | grep $1;then git checkout $1
      else
      git checkout -b $1
    fi
}

function RM_NODE {
    rm -rfv node_modules &&
    CURR_BRANCH=$(git branch | awk '/\*/ { print $2; }') &&
    git fetch && git reset --hard origin/$CURR_BRANCH
}


if [[ $1 == '-h' || $1 == '--help' ]]; then
  echo -e "Usage: $0 [--clean]"
  echo -e "\t--clean \tRemove destination folder first"
  exit
elif [[ $1 == "clean" || $1 == "--clean" ]]; then
  rm -rfv $ROOT_DIR/app
fi

main "$@"
